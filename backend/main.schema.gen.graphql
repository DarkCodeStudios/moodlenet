schema {
  query: Query
  mutation: Mutation
}
type SimpleResponse {
  success: Boolean!
  message: String
}
type RequestConfirmEmailResponse {
  flowKey: String
}
type Session {
  jwt: String
  message: String
}
type Mutation {
  accountChangeEmailConfirm(token: String!): Boolean!
  accountChangeEmailRequest(newEmail: String!): SimpleResponse!
  accountChangePassword(newPassword: String!): SimpleResponse!
  accountLogin(username: String!, password: String!): Session
  accountRequestActivateAccount(username: String!, password: String!, flowKey: String!): SimpleResponse!
  accountRequestConfirmEmail(token: String!): RequestConfirmEmailResponse
  accountSignUp(email: String!): SimpleResponse!
  accountTempSessionEmail(username: String!, email: String!): String
  contentCreateSubject(subjectInput: ContentCreateSubjectInput!): ContentSubject
  contentFollowSubject(subjectId: ID): ContentUserFollowsSubject
  contentFollowUser(userId: ID): ContentUserFollowsUser
  createContentUser(user: ContentCreateUserInput!): ContentUser!
}
interface Vertex {
  _id: ID!
}
interface Edge {
  _id: ID!
  _from: Vertex
  _to: Vertex
}
enum ContentCursorDir {
  after
  before
  middle
}
input ContentInputCursor {
  _id: ID!
  dir: ContentCursorDir!
}
input ContentPageInput {
  limit: Int
  cursor: ContentInputCursor
}
type ContentUserFollowsSubject implements Edge {
  _id: ID!
  _from: ContentUser
  _to: ContentSubject
}
type ContentUser implements Vertex {
  _id: ID!
  followers(page: ContentPageInput): [ContentUserFollowsUser!]!
  followsSubjects(page: ContentPageInput): [ContentUserFollowsSubject!]!
  followsUsers(page: ContentPageInput): [ContentUserFollowsUser!]!
  name: String!
}
type ContentSubject implements Vertex {
  _id: ID!
  followers(page: ContentPageInput): [ContentUserFollowsSubject!]!
  name: String!
}
type ContentUserFollowsUser implements Edge {
  _id: ID!
  _from: ContentUser
  _to: ContentUser
}
input ContentCreateSubjectInput {
  name: String!
}
type Query {
  contentSubject(_id: ID!): ContentSubject
  contentUser(_id: ID!): ContentUser
}
input ContentCreateUserInput {
  name: String
}