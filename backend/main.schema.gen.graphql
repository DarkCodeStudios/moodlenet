schema {
  query: Query
  mutation: Mutation
}
type SimpleResponse {
  success: Boolean!
  message: String
}
type RequestConfirmEmailResponse {
  flowKey: String
}
type Session {
  jwt: String
  message: String
}
type Mutation {
  accountSignUp(email: String!): SimpleResponse!
  accountRequestConfirmEmail(token: String!): RequestConfirmEmailResponse
  accountRequestActivateAccount(username: String!, password: String!, flowKey: String!): SimpleResponse!
  accountChangeEmailRequest(newEmail: String!): SimpleResponse!
  accountChangeEmailConfirm(token: String!): Boolean!
  accountChangePassword(newPassword: String!): SimpleResponse!
  accountTempSessionEmail(username: String!, email: String!): String
  accountLogin(username: String!, password: String!): Session
}
interface Vertex {
  id: ID!
}
interface WithIcon {
  icon: String!
}
interface WithName {
  name: String!
}
interface WithSummary {
  summary: String!
}
interface Edge {
  id: ID!
}
input PageInput {
  limit: Int
  after: ID
  before: ID
}
union Follower = User
union Followed = User | Subject
interface Follows {
  id: ID!
  follower: Follower
  follows: Followed
}
type UserFollowsSubject implements Follows {
  id: ID!
  follower: User
  follows: Subject
}
type User implements Vertex & WithIcon & WithName & WithSummary {
  bio: String!
  followers(page: PageInput): [UserFollowsUser!]!
  followsSubjects(page: PageInput): [UserFollowsSubject!]!
  followsUsers(page: PageInput): [UserFollowsUser!]!
  icon: String!
  id: ID!
  name: String!
  summary: String!
}
type Subject implements Vertex & WithIcon & WithName & WithSummary {
  followers(page: PageInput): [UserFollowsSubject!]!
  icon: String!
  id: ID!
  name: String!
  summary: String!
}
type UserFollowsUser implements Follows {
  id: ID!
  follower: User
  follows: User
}
type Query {
  subject(id: ID!): Subject
  user(id: ID!): User
}