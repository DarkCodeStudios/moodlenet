schema {
  query: Query
  mutation: Mutation
}
interface Vertex {
  _id: ID!
}
interface Edge {
  _id: ID!
  _from: Vertex
  _to: Vertex
}
enum CursorDir {
  after
  before
  middle
}
input InputCursor {
  _id: ID!
  dir: CursorDir!
}
input RelayPageInput {
  limit: Int
  cursor: InputCursor
}
type UserFollowsSubject implements GraphEdge {
  _id: ID!
  _from: User
  _to: Subject
}
type User implements GraphVertex {
  _id: ID!
  followers(page: RelayPageInput): [UserFollowsUser!]!
  followsSubjects(page: RelayPageInput): [UserFollowsSubject!]!
  followsUsers(page: RelayPageInput): [UserFollowsUser!]!
  name: String!
}
type Subject implements GraphVertex {
  _id: ID!
  followers(page: RelayPageInput): [UserFollowsSubject!]!
  name: String!
}
type Mutation {
  activateAccount(
    username: String!
    password: String!
    flowKey: String!
  ): SimpleResponse!
  changeEmailConfirm(token: String!): Boolean!
  changeEmailRequest(newEmail: String!): SimpleResponse!
  changePassword(newPassword: String!): SimpleResponse!
  confirmSignUpEmail(token: String!): RequestConfirmEmailResponse
  createSubject(subjectInput: CreateSubjectInput!): Subject
  createUser(user: CreateUserInput!): User!
  followSubject(subjectId: ID): UserFollowsSubject
  followUser(userId: ID): UserFollowsUser
  login(username: String!, password: String!): Session
  signUp(email: String!): SimpleResponse!
  tempSessionByEmail(username: String!, email: String!): String
}
type UserFollowsUser implements GraphEdge {
  _id: ID!
  _from: User
  _to: User
}
input CreateSubjectInput {
  name: String!
}
type Query {
  _fake: Int
  subject(_id: ID!): Subject
  user(_id: ID!): User
}
input CreateUserInput {
  name: String
}
type SimpleResponse {
  success: Boolean!
  message: String
}
type RequestConfirmEmailResponse {
  flowKey: String
}
type Session {
  jwt: String
  message: String
}
