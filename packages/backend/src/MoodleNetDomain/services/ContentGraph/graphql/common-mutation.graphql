type Mutation {
  createEdge(input: CreateEdgeInput!): CreateEdgeMutationPayload!
  createNode(input: CreateNodeInput!): CreateNodeMutationPayload!
  updateEdge(input: UpdateEdgeInput!): UpdateEdgeMutationPayload!
  updateNode(input: UpdateNodeInput!): UpdateNodeMutationPayload!
  deleteEdge(input: DeleteEdgeInput!): DeleteEdgeMutationPayload!
  deleteNode(input: DeleteNodeInput!): DeleteNodeMutationPayload!
}

# ^ CreateNode
input CreateNodeInput {
  nodeType: NodeType!
}
union CreateNodeMutationPayload = CreateNodeMutationSuccess | CreateNodeMutationError
type CreateNodeMutationSuccess {
  node: Node
}
type CreateNodeMutationError {
  type: CreateNodeMutationErrorType!
  details: String
}
enum CreateNodeMutationErrorType {
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ CreateNode

# ^ CreateEdge
input CreateEdgeInput {
  edgeType: EdgeType!
  from: ID!
  to: ID!
}
union CreateEdgeMutationPayload = CreateEdgeMutationSuccess | CreateEdgeMutationError
type CreateEdgeMutationSuccess {
  edge: Edge
}
type CreateEdgeMutationError {
  type: CreateEdgeMutationErrorType!
  details: String
}
enum CreateEdgeMutationErrorType {
  NotAuthorized
  NotAllowed
  AssertionFailed
  NoSelfReference
  UnexpectedInput
}
# $ CreateEdge

# ^ UpdateNode
input UpdateNodeInput {
  _id: ID!
  nodeType: NodeType!
}
union UpdateNodeMutationPayload = UpdateNodeMutationSuccess | UpdateNodeMutationError
type UpdateNodeMutationSuccess {
  node: Node
}
type UpdateNodeMutationError {
  type: UpdateNodeMutationErrorType!
  details: String
}
enum UpdateNodeMutationErrorType {
  NotFound
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ UpdateNode

# ^ UpdateEdge
input UpdateEdgeInput {
  id: ID!
  edgeType: EdgeType!
}
union UpdateEdgeMutationPayload = UpdateEdgeMutationSuccess | UpdateEdgeMutationError
type UpdateEdgeMutationSuccess {
  edge: Edge
}
type UpdateEdgeMutationError {
  type: UpdateEdgeMutationErrorType!
  details: String
}
enum UpdateEdgeMutationErrorType {
  NotFound
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ UpdateEdge

# ^ DeleteEdge
input DeleteEdgeInput {
  _id: ID!
  edgeType: EdgeType!
}
union DeleteEdgeMutationPayload = DeleteEdgeMutationSuccess | DeleteEdgeMutationError
type DeleteEdgeMutationSuccess {
  edge: Edge
}
type DeleteEdgeMutationError {
  type: DeleteEdgeMutationErrorType
  details: String
}
enum DeleteEdgeMutationErrorType {
  NotFound
  NotAuthorized
  AssertionFailed
}
# $ DeleteEdge

# ^ DeleteNode
input DeleteNodeInput {
  _id: ID!
  nodeType: NodeType!
}
union DeleteNodeMutationPayload = DeleteNodeMutationSuccess | DeleteNodeMutationError
type DeleteNodeMutationSuccess {
  node: Node
}
type DeleteNodeMutationError {
  type: DeleteNodeMutationErrorType
  details: String
}
enum DeleteNodeMutationErrorType {
  NotFound
  NotAuthorized
  AssertionFailed
}
# $ DeleteNode
