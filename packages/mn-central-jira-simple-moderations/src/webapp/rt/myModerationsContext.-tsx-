import type { PropsWithChildren } from 'react'
import { createContext, useMemo, useState } from 'react'
import type { RpcApprovalRequestState } from '../../common/types.mjs'
import { shell } from './shell.mjs'

export type MyModerationsContextT = { a: null }

export const MyModerationsContext = createContext<MyModerationsContextT>(null as any)

export function MyModerationsContextProvider({ children }: PropsWithChildren<unknown>) {
  const [myRpcApprovalRequestState, setMyRpcApprovalRequestState] =
    useState<RpcApprovalRequestState>()
  const auth = useContext(AuthCtx)
  // const canSend = !!auth.clientSessionData?.myProfile
  useEffect(() => {
    if (!auth.clientSessionData) return
    shell.rpc.me('')().then(setMyLmsWebUserConfig)
  }, [auth.clientSessionData])

  const ctx = useMemo<MyModerationsContextT>(() => ({ a: null }), [])
  return <MyModerationsContext.Provider value={ctx}>{children}</MyModerationsContext.Provider>
}
